@using RobottoBackend.Services
@using RobottoBackend.Models
@inject ICosmosDbService CosmosDbService
@page "/cosmos-db"

<PageTitle>Cosmos DB</PageTitle>

<h1>Cosmos DB</h1>

<p>Name: <input @bind="name" /></p>
<input type="button" class="btn btn-primary" @onclick="(async () => await AddItem())" value="Add" />
<p style="color: red;">@infoMessage</p>

@if (items == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th></th>                                                  
            </tr>
        </thead>
        <tbody>
            @foreach (var item in items)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.Name</td>
                    <td>
                        <input type="button" class="btn btn-danger" @onclick="(async () => await DeleteItem(item.Id))" value="Delete" />
                    </td>
                </tr>                
            }
        </tbody>
    </table>
}


@code {
    private string name = "";
    private string infoMessage = "";
    private IEnumerable<Item> items = null;

    protected override async Task OnInitializedAsync()
    {
        await UpdateItems();
    }

    private async Task AddItem()
    {
        try
        {
            infoMessage = "Adding item...";
            await CosmosDbService.AddItemAsync(new Item { Name = name, Id = Guid.NewGuid().ToString() });
            infoMessage = "Item added successfully.";
            await UpdateItems();
        }
        catch
        {
            infoMessage = "Item could not be added.";
        }
    }

    private async Task DeleteItem(string id)
    {
        try
        {
            infoMessage = "Deleting item...";
            await CosmosDbService.DeleteItemAsync(id);
            infoMessage = "Item deleted successfully.";
            await UpdateItems();
        }
        catch
        {
            infoMessage = "Item could not be deleted.";
        }
    }

    private async Task UpdateItems()
    {
        items = await CosmosDbService.GetItemsAsync("SELECT * FROM testcontainer");
    }
}
